ËØ∑Áõ¥Êé•ËøîÂõû‰∏ãÈù¢ÁöÑÂÜÖÂÆπÂØπÂ∫îÁöÑ UIÔºö
```tsx // Êñá‰ª∂: App.tsx (‰∏ªÊñá‰ª∂)
import { useState } from "react";
import { Button } from "./component";
import CommandCenterPage from "./city";
import AgentNetworkPage from "./infrastructure";
import OperationsPage from "./services";
import IntelligencePage from "./analytics";
import SystemsPage from "./monitoring";

export default function TacticalDashboard() {
  const [activeSection, setActiveSection] = useState("agents");
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);

  return (
    <div className="flex h-screen bg-neutral-900">
      <div
        className={`${sidebarCollapsed ? "w-16" : "w-70"} fixed z-50 h-full border-r border-neutral-700 bg-neutral-900 transition-all duration-300 md:relative md:z-auto md:h-auto ${!sidebarCollapsed ? "md:block" : ""}`}
      >
        <div className="p-4">
          <div className="mb-8 flex items-center justify-between">
            <div className={`${sidebarCollapsed ? "hidden" : "block"}`}>
              <h1 className="text-lg font-bold tracking-wider text-orange-500">
                SMART CITY HUB
              </h1>
              <p className="text-xs text-neutral-500">v3.2.1 MUNICIPAL</p>
            </div>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
              className="text-neutral-400 hover:text-orange-500"
            >
              <span
                className={`transition-transform ${sidebarCollapsed ? "" : "rotate-180"}`}
              >
                ‚ñ∫
              </span>
            </Button>
          </div>

          <nav className="space-y-2">
            {[
              { id: "agents", label: "INFRASTRUCTURE" },
              { id: "operations", label: "SERVICES" },
              { id: "overview", label: "CITY OVERVIEW" },
              { id: "intelligence", label: "ANALYTICS" },
              { id: "systems", label: "MONITORING" },
            ].map((item) => (
              <button
                key={item.id}
                onClick={() => setActiveSection(item.id)}
                className={`flex w-full items-center gap-3 rounded p-3 transition-colors ${
                  activeSection === item.id
                    ? "bg-orange-500 text-white"
                    : "text-neutral-400 hover:bg-neutral-800 hover:text-white"
                }`}
              >
                <span className="text-sm font-medium">‚ñ†</span>
                {!sidebarCollapsed && (
                  <span className="text-sm font-medium">{item.label}</span>
                )}
              </button>
            ))}
          </nav>

          {!sidebarCollapsed && (
            <div className="mt-8 rounded border border-neutral-700 bg-neutral-800 p-4">
              <div className="mb-2 flex items-center gap-2">
                <div className="h-2 w-2 animate-pulse rounded-full bg-white"></div>
                <span className="text-xs text-white">SYSTEM ONLINE</span>
              </div>
              <div className="text-xs text-neutral-500">
                <div>UPTIME: 72:14:33</div>
                <div>SENSORS: 2,847 ACTIVE</div>
                <div>SERVICES: 23 RUNNING</div>
              </div>
            </div>
          )}
        </div>
      </div>

      {!sidebarCollapsed && (
        <div
          className="fixed inset-0 z-40 bg-black/50 md:hidden"
          onClick={() => setSidebarCollapsed(true)}
        />
      )}

      <div
        className={`flex flex-1 flex-col bg-neutral-900 ${!sidebarCollapsed ? "md:ml-0" : ""}`}
      >
        <div className="flex h-16 items-center justify-between border-b border-neutral-700 bg-neutral-800 px-6">
          <div className="flex items-center gap-4">
            <div className="text-sm text-neutral-400">
              SMART CITY CONTROL /{" "}
              <span className="text-orange-500">INFRASTRUCTURE</span>
            </div>
          </div>
          <div className="flex items-center gap-4">
            <div className="text-xs text-neutral-500">
              LAST UPDATE: 05/06/2025 20:00 UTC
            </div>
            <Button
              variant="ghost"
              size="icon"
              className="text-neutral-400 hover:text-orange-500"
            >
              üîî
            </Button>
            <Button
              variant="ghost"
              size="icon"
              className="text-neutral-400 hover:text-orange-500"
            >
              ‚ü≤
            </Button>
          </div>
        </div>

        <div className="flex-1 overflow-auto bg-neutral-900">
          {activeSection === "overview" && <CommandCenterPage />}
          {activeSection === "agents" && <AgentNetworkPage />}
          {activeSection === "operations" && <OperationsPage />}
          {activeSection === "intelligence" && <IntelligencePage />}
          {activeSection === "systems" && <SystemsPage />}
        </div>
      </div>
    </div>
  );
}
```

```tsx // Êñá‰ª∂: infrastructure.tsx
import { useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  Button,
  Input,
  Badge,
} from "./component";

export default function AgentNetworkPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedAgent, setSelectedAgent] = useState(null);

  const agents = [
    {
      id: "D-123A",
      name: "Water Pump #1",
      status: "active",
      location: "Downtown",
      lastSeen: "2 min ago",
      missions: 147,
      risk: "low",
    },
    {
      id: "D-124B",
      name: "Traffic Sensor A",
      status: "standby",
      location: "Uptown",
      lastSeen: "15 min ago",
      missions: 32,
      risk: "medium",
    },
    {
      id: "D-125C",
      name: "Power Grid #3",
      status: "active",
      location: "Industrial Zone",
      lastSeen: "1 min ago",
      missions: 63,
      risk: "high",
    },
    {
      id: "D-126D",
      name: "Sewer Monitor #7",
      status: "offline",
      location: "Residential Area",
      lastSeen: "3 hours ago",
      missions: 28,
      risk: "critical",
    },
    {
      id: "D-127E",
      name: "Air Quality Sensor B",
      status: "active",
      location: "Parkside",
      lastSeen: "5 min ago",
      missions: 41,
      risk: "medium",
    },
    {
      id: "D-128F",
      name: "Streetlight Controller",
      status: "maintenance",
      location: "Highway 1",
      lastSeen: "1 day ago",
      missions: 12,
      risk: "low",
    },
    {
      id: "D-129G",
      name: "Bridge Sensor #2",
      status: "active",
      location: "Riverfront",
      lastSeen: "8 min ago",
      missions: 55,
      risk: "high",
    },
    {
      id: "D-130H",
      name: "Weather Station #5",
      status: "standby",
      location: "Airport",
      lastSeen: "22 min ago",
      missions: 38,
      risk: "medium",
    },
  ];

  const filteredAgents = agents.filter(
    (agent) =>
      agent.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      agent.id.toLowerCase().includes(searchTerm.toLowerCase()),
  );

  return (
    <div className="space-y-6 p-6">
      <div className="flex flex-col items-start justify-between gap-4 sm:flex-row sm:items-center">
        <div>
          <h1 className="text-2xl font-bold tracking-wider text-white">
            INFRASTRUCTURE NETWORK
          </h1>
          <p className="text-sm text-neutral-400">
            Manage and monitor city infrastructure
          </p>
        </div>
        <div className="flex gap-2">
          <Button className="bg-orange-500 text-white hover:bg-orange-600">
            Deploy Sensor
          </Button>
          <Button className="bg-orange-500 text-white hover:bg-orange-600">
            <span className="mr-2">‚ö°</span>
            Filter
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-4 lg:grid-cols-4">
        <Card className="lg:col-span-1">
          <CardContent className="p-4">
            <div className="relative">
              <span className="absolute top-1/2 left-3 -translate-y-1/2 transform text-neutral-400">
                üîç
              </span>
              <Input
                placeholder="Search devices..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs tracking-wider text-neutral-400">
                  ACTIVE SENSORS
                </p>
                <p className="font-mono text-2xl font-bold text-white">2,847</p>
              </div>
              <span className="text-2xl text-white">üõ°Ô∏è</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs tracking-wider text-neutral-400">
                  OFFLINE
                </p>
                <p className="font-mono text-2xl font-bold text-red-500">3</p>
              </div>
              <span className="text-2xl text-red-500">üõ°Ô∏è</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs tracking-wider text-neutral-400">
                  MAINTENANCE
                </p>
                <p className="font-mono text-2xl font-bold text-orange-500">
                  23
                </p>
              </div>
              <span className="text-2xl text-orange-500">üõ°Ô∏è</span>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="text-sm font-medium tracking-wider text-neutral-300">
            INFRASTRUCTURE ROSTER
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-neutral-700">
                  <th className="px-4 py-3 text-left text-xs font-medium tracking-wider text-neutral-400">
                    DEVICE ID
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium tracking-wider text-neutral-400">
                    DEVICE NAME
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium tracking-wider text-neutral-400">
                    STATUS
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium tracking-wider text-neutral-400">
                    LOCATION
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium tracking-wider text-neutral-400">
                    LAST SEEN
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium tracking-wider text-neutral-400">
                    OPERATIONS
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium tracking-wider text-neutral-400">
                    RISK
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium tracking-wider text-neutral-400">
                    ACTIONS
                  </th>
                </tr>
              </thead>
              <tbody>
                {filteredAgents.map((agent, index) => (
                  <tr
                    key={agent.id}
                    className={`cursor-pointer border-b border-neutral-800 transition-colors hover:bg-neutral-800 ${
                      index % 2 === 0 ? "bg-neutral-900" : "bg-neutral-850"
                    }`}
                    onClick={() => setSelectedAgent(agent)}
                  >
                    <td className="px-4 py-3 font-mono text-sm text-white">
                      {agent.id}
                    </td>
                    <td className="px-4 py-3 text-sm text-white">
                      {agent.name}
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex items-center gap-2">
                        <div
                          className={`h-2 w-2 rounded-full ${
                            agent.status === "active"
                              ? "bg-white"
                              : agent.status === "standby"
                                ? "bg-neutral-500"
                                : agent.status === "maintenance"
                                  ? "bg-orange-500"
                                  : "bg-red-500"
                          }`}
                        ></div>
                        <span className="text-xs tracking-wider text-neutral-300 uppercase">
                          {agent.status}
                        </span>
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex items-center gap-2">
                        <span className="text-neutral-400">üìç</span>
                        <span className="text-sm text-neutral-300">
                          {agent.location}
                        </span>
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex items-center gap-2">
                        <span className="text-neutral-400">‚è∞</span>
                        <span className="font-mono text-sm text-neutral-300">
                          {agent.lastSeen}
                        </span>
                      </div>
                    </td>
                    <td className="px-4 py-3 font-mono text-sm text-white">
                      {agent.missions}
                    </td>
                    <td className="px-4 py-3">
                      <Badge
                        className={`rounded px-2 py-1 text-xs tracking-wider uppercase ${
                          agent.risk === "critical"
                            ? "border-red-500/20 bg-red-500/20 text-red-500"
                            : agent.risk === "high"
                              ? "border-orange-500/20 bg-orange-500/20 text-orange-500"
                              : agent.risk === "medium"
                                ? "border-neutral-500/20 bg-neutral-500/20 text-neutral-300"
                                : "border-white/20 bg-white/20 text-white"
                        }`}
                      >
                        {agent.risk}
                      </Badge>
                    </td>
                    <td className="px-4 py-3">
                      <Button
                        variant="ghost"
                        size="icon"
                        className="text-neutral-400 hover:text-orange-500"
                      >
                        ‚ãØ
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {selectedAgent && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
          <Card className="w-full max-w-2xl">
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle className="text-lg font-bold tracking-wider text-white">
                  {selectedAgent.name}
                </CardTitle>
                <p className="font-mono text-sm text-neutral-400">
                  {selectedAgent.id}
                </p>
              </div>
              <Button
                variant="ghost"
                onClick={() => setSelectedAgent(null)}
                className="text-neutral-400 hover:text-white"
              >
                ‚úï
              </Button>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="mb-1 text-xs tracking-wider text-neutral-400">
                    STATUS
                  </p>
                  <div className="flex items-center gap-2">
                    <div
                      className={`h-2 w-2 rounded-full ${
                        selectedAgent.status === "active"
                          ? "bg-white"
                          : selectedAgent.status === "standby"
                            ? "bg-neutral-500"
                            : selectedAgent.status === "maintenance"
                              ? "bg-orange-500"
                              : "bg-red-500"
                      }`}
                    ></div>
                    <span className="text-sm tracking-wider text-white uppercase">
                      {selectedAgent.status}
                    </span>
                  </div>
                </div>
                <div>
                  <p className="mb-1 text-xs tracking-wider text-neutral-400">
                    LOCATION
                  </p>
                  <p className="text-sm text-white">{selectedAgent.location}</p>
                </div>
                <div>
                  <p className="mb-1 text-xs tracking-wider text-neutral-400">
                    OPERATIONS COMPLETED
                  </p>
                  <p className="font-mono text-sm text-white">
                    {selectedAgent.missions}
                  </p>
                </div>
                <div>
                  <p className="mb-1 text-xs tracking-wider text-neutral-400">
                    RISK LEVEL
                  </p>
                  <Badge
                    className={`rounded px-2 py-1 text-xs tracking-wider uppercase ${
                      selectedAgent.risk === "critical"
                        ? "border-red-500/20 bg-red-500/20 text-red-500"
                        : selectedAgent.risk === "high"
                          ? "border-orange-500/20 bg-orange-500/20 text-orange-500"
                          : selectedAgent.risk === "medium"
                            ? "border-neutral-500/20 bg-neutral-500/20 text-neutral-300"
                            : "border-white/20 bg-white/20 text-white"
                    }`}
                  >
                    {selectedAgent.risk}
                  </Badge>
                </div>
              </div>
              <div className="flex gap-2 pt-4">
                <Button className="bg-orange-500 text-white hover:bg-orange-600">
                  Schedule Maintenance
                </Button>
                <Button
                  variant="outline"
                  className="bg-transparent text-neutral-400 hover:text-neutral-300"
                >
                  View History
                </Button>
                <Button
                  variant="outline"
                  className="bg-transparent text-neutral-400 hover:text-neutral-300"
                >
                  Send Command
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
```

```tsx // Êñá‰ª∂: services.tsx
import { useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  Button,
  Badge,
} from "./component";

export default function ServicesPage() {
  const [selectedOperation, setSelectedOperation] = useState(null);

  const operations = [
    {
      id: "OP-OMEGA-001",
      name: "TRAFFIC OPTIMIZATION",
      status: "active",
      priority: "critical",
      location: "Downtown",
      agents: 5,
      progress: 75,
      startDate: "2025-06-15",
      estimatedCompletion: "2025-06-30",
      description: "Optimize traffic flow in the downtown area.",
      objectives: [
        "Analyze traffic patterns",
        "Implement smart signals",
        "Reduce congestion",
      ],
    },
    {
      id: "OP-DELTA-002",
      name: "ENERGY EFFICIENCY",
      status: "planning",
      priority: "high",
      location: "Residential Area",
      agents: 3,
      progress: 25,
      startDate: "2025-06-20",
      estimatedCompletion: "2025-07-05",
      description: "Improve energy efficiency in residential buildings.",
      objectives: [
        "Conduct energy audits",
        "Install smart meters",
        "Promote energy conservation",
      ],
    },
    {
      id: "OP-SIERRA-003",
      name: "WASTE MANAGEMENT",
      status: "completed",
      priority: "medium",
      location: "Industrial Zone",
      agents: 2,
      progress: 100,
      startDate: "2025-05-28",
      estimatedCompletion: "2025-06-12",
      description: "Enhance waste management processes in the industrial zone.",
      objectives: [
        "Optimize collection routes",
        "Increase recycling rates",
        "Reduce landfill waste",
      ],
    },
    {
      id: "OP-ALPHA-004",
      name: "WATER QUALITY",
      status: "active",
      priority: "high",
      location: "Reservoir",
      agents: 4,
      progress: 60,
      startDate: "2025-06-10",
      estimatedCompletion: "2025-06-25",
      description: "Monitor and improve water quality in the city reservoir.",
      objectives: [
        "Conduct water testing",
        "Implement filtration systems",
        "Protect water sources",
      ],
    },
    {
      id: "OP-BRAVO-005",
      name: "AIR MONITORING",
      status: "compromised",
      priority: "critical",
      location: "City Center",
      agents: 6,
      progress: 40,
      startDate: "2025-06-05",
      estimatedCompletion: "2025-06-20",
      description:
        "Monitor air quality and reduce pollution levels in the city center.",
      objectives: [
        "Install air quality sensors",
        "Identify pollution sources",
        "Enforce regulations",
      ],
    },
  ];

  const getStatusColor = (status) => {
    switch (status) {
      case "active":
        return "bg-white/20 text-white border-white/20";
      case "planning":
        return "bg-orange-500/20 text-orange-500 border-orange-500/20";
      case "completed":
        return "bg-white/20 text-white border-white/20";
      case "compromised":
        return "bg-red-500/20 text-red-500 border-red-500/20";
      default:
        return "bg-neutral-500/20 text-neutral-300 border-neutral-500/20";
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case "critical":
        return "bg-red-500/20 text-red-500 border-red-500/20";
      case "high":
        return "bg-orange-500/20 text-orange-500 border-orange-500/20";
      case "medium":
        return "bg-neutral-500/20 text-neutral-300 border-neutral-500/20";
      case "low":
        return "bg-white/20 text-white border-white/20";
      default:
        return "bg-neutral-500/20 text-neutral-300 border-neutral-500/20";
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "active":
        return <span className="text-sm">üéØ</span>;
      case "planning":
        return <span className="text-sm">‚è∞</span>;
      case "completed":
        return <span className="text-sm">‚úÖ</span>;
      case "compromised":
        return <span className="text-sm">‚ùå</span>;
      default:
        return <span className="text-sm">‚ö†Ô∏è</span>;
    }
  };

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex flex-col items-start justify-between gap-4 sm:flex-row sm:items-center">
        <div>
          <h1 className="text-2xl font-bold tracking-wider text-white">
            CITY SERVICES
          </h1>
          <p className="text-sm text-neutral-400">
            Municipal service management and coordination
          </p>
        </div>
        <div className="flex gap-2">
          <Button className="bg-orange-500 text-white hover:bg-orange-600">
            New Service
          </Button>
          <Button className="bg-orange-500 text-white hover:bg-orange-600">
            Service Report
          </Button>
        </div>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs tracking-wider text-neutral-400">
                  ACTIVE SERVICES
                </p>
                <p className="font-mono text-2xl font-bold text-white">23</p>
              </div>
              <span className="text-2xl text-white">üéØ</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs tracking-wider text-neutral-400">
                  COMPLETED
                </p>
                <p className="font-mono text-2xl font-bold text-white">180</p>
              </div>
              <span className="text-2xl text-white">‚úÖ</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs tracking-wider text-neutral-400">
                  DISRUPTED
                </p>
                <p className="font-mono text-2xl font-bold text-red-500">2</p>
              </div>
              <span className="text-2xl text-red-500">‚ùå</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-xs tracking-wider text-neutral-400">
                  SUCCESS RATE
                </p>
                <p className="font-mono text-2xl font-bold text-white">94%</p>
              </div>
              <span className="text-2xl text-white">‚ö†Ô∏è</span>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Operations List */}
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-2 xl:grid-cols-3">
        {operations.map((operation) => (
          <Card
            key={operation.id}
            className="cursor-pointer transition-colors hover:border-orange-500/50"
            onClick={() => setSelectedOperation(operation)}
          >
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div>
                  <CardTitle className="text-sm font-bold tracking-wider text-white">
                    {operation.name}
                  </CardTitle>
                  <p className="font-mono text-xs text-neutral-400">
                    {operation.id}
                  </p>
                </div>
                <div className="flex items-center gap-2">
                  {getStatusIcon(operation.status)}
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex gap-2">
                <Badge className={getStatusColor(operation.status)}>
                  {operation.status.toUpperCase()}
                </Badge>
                <Badge className={getPriorityColor(operation.priority)}>
                  {operation.priority.toUpperCase()}
                </Badge>
              </div>

              <p className="text-sm text-neutral-300">
                {operation.description}
              </p>

              <div className="space-y-2">
                <div className="flex items-center gap-2 text-xs text-neutral-400">
                  <span>üìç</span>
                  <span>{operation.location}</span>
                </div>
                <div className="flex items-center gap-2 text-xs text-neutral-400">
                  <span>üë•</span>
                  <span>{operation.agents} teams assigned</span>
                </div>
                <div className="flex items-center gap-2 text-xs text-neutral-400">
                  <span>‚è∞</span>
                  <span>Est. completion: {operation.estimatedCompletion}</span>
                </div>
              </div>

              <div className="space-y-2">
                <div className="flex justify-between text-xs">
                  <span className="text-neutral-400">Progress</span>
                  <span className="font-mono text-white">
                    {operation.progress}%
                  </span>
                </div>
                <div className="h-2 w-full rounded-full bg-neutral-800">
                  <div
                    className="h-2 rounded-full bg-orange-500 transition-all duration-300"
                    style={{ width: `${operation.progress}%` }}
                  ></div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Operation Detail Modal */}
      {selectedOperation && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
          <Card className="max-h-[90vh] w-full max-w-4xl overflow-y-auto">
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle className="text-xl font-bold tracking-wider text-white">
                  {selectedOperation.name}
                </CardTitle>
                <p className="font-mono text-sm text-neutral-400">
                  {selectedOperation.id}
                </p>
              </div>
              <Button
                variant="ghost"
                onClick={() => setSelectedOperation(null)}
                className="text-neutral-400 hover:text-white"
              >
                ‚úï
              </Button>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                <div className="space-y-4">
                  <div>
                    <h3 className="mb-2 text-sm font-medium tracking-wider text-neutral-300">
                      OPERATION STATUS
                    </h3>
                    <div className="flex gap-2">
                      <Badge
                        className={getStatusColor(selectedOperation.status)}
                      >
                        {selectedOperation.status.toUpperCase()}
                      </Badge>
                      <Badge
                        className={getPriorityColor(selectedOperation.priority)}
                      >
                        {selectedOperation.priority.toUpperCase()}
                      </Badge>
                    </div>
                  </div>

                  <div>
                    <h3 className="mb-2 text-sm font-medium tracking-wider text-neutral-300">
                      SERVICE DETAILS
                    </h3>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-neutral-400">Location:</span>
                        <span className="text-white">
                          {selectedOperation.location}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-400">Teams:</span>
                        <span className="font-mono text-white">
                          {selectedOperation.agents}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-400">Start Date:</span>
                        <span className="font-mono text-white">
                          {selectedOperation.startDate}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-400">
                          Est. Completion:
                        </span>
                        <span className="font-mono text-white">
                          {selectedOperation.estimatedCompletion}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div>
                    <h3 className="mb-2 text-sm font-medium tracking-wider text-neutral-300">
                      PROGRESS
                    </h3>
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span className="text-neutral-400">Completion</span>
                        <span className="font-mono text-white">
                          {selectedOperation.progress}%
                        </span>
                      </div>
                      <div className="h-3 w-full rounded-full bg-neutral-800">
                        <div
                          className="h-3 rounded-full bg-orange-500 transition-all duration-300"
                          style={{ width: `${selectedOperation.progress}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="mb-2 text-sm font-medium tracking-wider text-neutral-300">
                      OBJECTIVES
                    </h3>
                    <div className="space-y-2">
                      {selectedOperation.objectives.map((objective, index) => (
                        <div
                          key={index}
                          className="flex items-center gap-2 text-sm"
                        >
                          <div className="h-2 w-2 rounded-full bg-orange-500"></div>
                          <span className="text-neutral-300">{objective}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="mb-2 text-sm font-medium tracking-wider text-neutral-300">
                  DESCRIPTION
                </h3>
                <p className="text-sm text-neutral-300">
                  {selectedOperation.description}
                </p>
              </div>

              <div className="flex gap-2 border-t border-neutral-700 pt-4">
                <Button className="bg-orange-500 text-white hover:bg-orange-600">
                  Update Status
                </Button>
                <Button
                  variant="outline"
                  className="bg-transparent text-neutral-400 hover:text-neutral-300"
                >
                  View Reports
                </Button>
                <Button
                  variant="outline"
                  className="bg-transparent text-neutral-400 hover:text-neutral-300"
                >
                  Assign Teams
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
```

```tsx // Êñá‰ª∂: city.tsx
export default function CityPage() {
  return (
    <p className="text-center text-neutral-400">
      City Overview module coming soon...
    </p>
  );
}
```

```tsx // Êñá‰ª∂: analytics.tsx
export default function AnalyticsPage() {
  return (
    <p className="text-center text-neutral-400">
      Analytics module coming soon...
    </p>
  );
}
```

```tsx // Êñá‰ª∂: monitoring.tsx
export default function MonitoringPage() {
  return (
    <p className="text-center text-neutral-400">
      Monitoring module coming soon...
    </p>
  );
}
```

```tsx // Êñá‰ª∂: component.tsx
import type React from "react";

export function Card({ children, className = "", onClick }) {
  return (
    <div
      className={`rounded-lg border border-neutral-700 bg-neutral-900 ${className}`}
      onClick={onClick}
    >
      {children}
    </div>
  );
}

export function CardHeader({
  children,
  className = "",
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return <div className={`p-6 pb-0 ${className}`}>{children}</div>;
}

export function CardTitle({
  children,
  className = "",
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <h3
      className={`text-lg leading-none font-semibold tracking-tight ${className}`}
    >
      {children}
    </h3>
  );
}

export function CardContent({
  children,
  className = "",
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return <div className={`p-6 ${className}`}>{children}</div>;
}

export function Button({
  children,
  className = "",
  onClick,
  variant = "default",
  size = "default",
  disabled = false,
}) {
  const baseClasses =
    "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none";

  const variantClasses = {
    default: "bg-orange-500 text-white hover:bg-orange-600",
    ghost: "hover:bg-neutral-800 hover:text-white",
    outline:
      "border border-neutral-700 bg-transparent hover:bg-neutral-800 hover:text-white",
  };

  const sizeClasses = {
    default: "h-10 py-2 px-4",
    icon: "h-10 w-10",
  };

  return (
    <button
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}
      onClick={onClick}
      disabled={disabled}
    >
      {children}
    </button>
  );
}

export function Badge({ children, className = "" }) {
  return (
    <div
      className={`focus:ring-ring inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:ring-2 focus:ring-offset-2 focus:outline-none ${className}`}
    >
      {children}
    </div>
  );
}

export function Input({
  placeholder,
  value,
  onChange,
  className = "",
  type = "text",
}) {
  return (
    <input
      type={type}
      placeholder={placeholder}
      value={value}
      onChange={onChange}
      className={`flex h-10 w-full rounded-md border border-neutral-600 bg-neutral-800 px-3 py-2 text-sm text-white placeholder:text-neutral-400 focus:border-transparent focus:ring-2 focus:ring-orange-500 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
    />
  );
}
```